#! /usr/bin/python

import json 
import os
import sys
import subprocess
import time
import re
import argparse
import ctypes
from sys import exit

print('CMake Project Builder')

def is_python3():
    return sys.version_info > (3, 0)

def is_windows():
    return sys.platform.startswith('win')

def run_as_admin(argv=None, debug=True):
    shell32 = ctypes.windll.shell32
    if argv is None and shell32.IsUserAnAdmin():
        return True
        
    if argv is None:
        argv = sys.argv
    cmd = None
    if is_python3():
        if hasattr(sys, '_MEIPASS'):
            # Support pyinstaller wrapped program.
            arguments = map(str, argv[1:])
        else:
            arguments = map(str, argv)
        argument_line = ' '.join(arguments)
        executable = str(sys.executable)
        cmd = 'runas'
    else:
        if hasattr(sys, '_MEIPASS'):
            # Support pyinstaller wrapped program.
            arguments = map(unicode, argv[1:])
        else:
            arguments = map(unicode, argv)
        argument_line = u' '.join(arguments)
        executable = unicode(sys.executable)
        cmd = u'runas'
    if debug:
        print('Command line: ', executable, argument_line)
    ret = shell32.ShellExecuteW(None, cmd, executable, argument_line, None, 1)
    if int(ret) <= 32:
        return False
    return None

def isCmakeToolsProject():
    if(os.path.exists('.cmake-project.json')):
        os.rename('.cmake-project.json', 'cmake-project.json')
    if(os.path.exists('cmake-project.json')):
        return True
    return False

def loadProject():
    if(isCmakeToolsProject()):
        with open('cmake-project.json') as json_file:
            return json.load(json_file)

    return None

def printProgress(pg, title):
    pg10 = pg / 10
    pgStr = ("." * int(pg10)) + (" " * int(10 - pg10))
    spaces = ''
    if pg < 10:
        spaces = '  '
    elif pg < 100:
        spaces = ' '
    pgStr = "\033[0;33m[%s]\033[0;0m %s%d%% | %s     \r" % (pgStr, spaces, pg, title)
    sys.stdout.write(pgStr)
    sys.stdout.flush()

class cd:
    """Context manager for changing the current working directory"""
    def __init__(self, newPath):
        self.newPath = os.path.expanduser(newPath)

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)

def run(cmd, progress, title):
    pg = 0
    printProgress(pg, title)

    reg = True
    if isinstance(progress, dict):
        reg = False

    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    for line in iter(p.stdout.readline, b''):
        line = str(line)
        line = line.replace('\n', '').replace('\r', '')
        # print(line)
        pgOld = pg

        if reg == False:
            for val in progress:
                if line == progress[val]:
                    pg = val
        else:
            try:
                m = re.search(progress, line)
                val = int(m.groups(0)[0].replace('%', ''))
                pg = val
            except:
                pass

        if pg != pgOld:
            printProgress(pg, title)

    pg = 100
    p.stdout.close()
    p.wait()
    
    if p.returncode == 0:
        printProgress(pg, title)
    print("")
    return p.returncode 

def runSilent(cmd, title):
    pg = 100
    printProgress(pg, title)

    rt = None

    with open(os.devnull, 'w') as fp:
        try:
            p = subprocess.Popen(cmd, stdout=fp, stderr=subprocess.STDOUT)
            p.communicate()
            rt = p.returncode
        except:
            pass
    return rt

def runSimple(args):
    manually = False
    with open(os.devnull, 'w') as fp:
        p = subprocess.Popen(args, stdout=fp)
        try:
            p.communicate()
        except:
            manually = True
        
        if manually:
            return None
        else:
            return p.returncode
    return None

def build(project, args):
    print("\033[1;34mBuilding: %s\033[0;0m" % project['name'])
    forceConfig = False
    if not os.path.exists('build'):
        os.makedirs('build')
        forceConfig = True

    start = time.time()

    exitCode = 0

    with cd("build"):
        if not os.path.exists('cmake-deps'):
            os.makedirs('cmake-deps')
        with cd("cmake-deps"):
            if 'deps' in project:
                depN = 0
                for dep in project['deps']:
                    depN = depN + 1
                    rt = runSimple(['git', 'ls-remote', dep])
                    if rt == 0:
                        exitCode = runSilent(['git', 'clone', dep, 'dep%d' % depN], "Downloading %s" % dep)
                        #if exitCode != 0:
                        #    end = time.time()
                        #    print("\033[0;31mFailed to download dependencies [%s]\033[0;0m" % dep)
                        #    return False

    if forceConfig or args['config']:
        with cd("build"):
            cmakeArgs = ['cmake', '..']
            if len(args['generator']) > 0:
                cmakeArgs.append('-G')
                cmakeArgs.append(args['generator'])
            exitCode = run(cmakeArgs, {50 : "-- Configuring done"}, "Configuring")
        if exitCode != 0:
            end = time.time()
            print("\033[0;31mFailed to configure\033[0;0m")
            return False

    with cd("build"):
        exitCode = run(['cmake', '--build', '.'], "\[(.*?)]", "Building")
    if exitCode != 0:
        end = time.time()
        print("\033[0;31mFailed to build\033[0;0m")
        return False

    if args['install']:
        with cd("build"):
            if is_windows():
                # rc = run_as_admin()
                # if rc is None:
                #     print('Elevating to admin privilege')
                #     return True
                # elif rc != True:
                #     print('Error(ret=%d): cannot elevate privilege.' % rc)
                #     return False
                    
                
                exitCode = run(['cmake', '--build', '.', '--target', 'install'], "\[(.*?)]", "Installing")
            else:
                exitCode = run(['sudo', 'cmake', '--build', '.', '--target', 'install'], "\[(.*?)]", "Installing")
        if exitCode != 0:
            end = time.time()
            print("\033[0;31mFailed to install\033[0;0m")
            return False

    end = time.time()
    s = end - start
    print("\033[0;32mBuild finished in %fs\033[0;0m" % s)
    
    return True

def str2bool(v):
    if isinstance(v, bool):
       return v
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')

# Construct the argument parser
ap = argparse.ArgumentParser()

# Add the arguments to the parser
ap.add_argument("-c", "--config", required=False, help="configure before build", type=str2bool, nargs='?', const=True, default=False)
ap.add_argument("-i", "--install", required=False, help="install after build", type=str2bool, nargs='?', const=True, default=False)
ap.add_argument("-G", "--generator", required=False, help="sets the generator", type=str, default="")
args = vars(ap.parse_args())

project = loadProject()
if project == None:
    print('No project found')
    exit()

ret = build(project, args)
if ret == True:
    print('Project builded!')
    print('Use cmake-run to run your project')
else:
    print('Failed to build the project')