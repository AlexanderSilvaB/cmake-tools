#! /usr/bin/python

import json 
import os
import argparse
import subprocess
import sys

_vmajor = 0
_vminor = 1

print('CMake Project Creator v%d.%d' % (_vmajor, _vminor))

def is_python3():
    return sys.version_info > (3, 0)

if is_python3():
   raw_input = input 

def isCmakeToolsProject():
    if(os.path.exists('.cmake-project.json')):
        os.rename('.cmake-project.json', 'cmake-project.json')
    if(os.path.exists('cmake-project.json')):
        return True
    return False

def run(args):
    manually = False
    with open(os.devnull, 'w') as fp:
        p = subprocess.Popen(args, stdout=fp)
        try:
            p.communicate()
        except:
            manually = True
        
        if manually:
            return None
        else:
            return p.returncode
    return None

def createJson(args):
    project = {}

    if(isCmakeToolsProject()):
        with open('cmake-project.json') as json_file:
            project = json.load(json_file)
    else:
        print('Creating a new project')
        project['name'] = os.path.basename(os.getcwd())
        project['language'] = 'cpp'
        project['descr'] = ''
        project['version'] = '0.1'
        project['libs'] = []
        project['exes'] = []
        project['deps'] = []

    if(hasattr(args['name'], '__len__') and len(args['name']) > 0):
        project['name'] = args['name']
    else:
        while True:
            project['name'] = raw_input('Project name [%s]: ' % project['name']) or project['name']
            if len(project['name']) == 0:
                print('Invalid name')
            else:
                break
    
    if(hasattr(args['language'], '__len__') and len(args['language']) > 0):
        project['language'] = args['language']
    else:
        while True:
            project['language'] = raw_input('Project language [%s]: ' % project['language']) or project['language']
            if project['language'] != 'cpp' and project['language'] != 'c':
                print('Invalid language')
            else:
                break

    if 'descr' not in project:
        project['descr'] = ''
    if(hasattr(args['descr'], '__len__') and len(args['descr']) > 0):
        project['descr'] = ' '.join(args['descr'])
    else:
        project['descr'] = raw_input('Project description [%s]: ' % project['descr']) or project['descr']

    if 'version' not in project:
        project['version'] = '0.1'
    if(hasattr(args['version'], '__len__') and len(args['version']) > 0):
        project['version'] = args['version']
    else:
        project['version'] = raw_input('Project version [%s]: ' % project['version']) or project['version']


    if(hasattr(args['libs'], '__len__') and len(args['libs']) > 0):
        project['libs'] = args['libs']
    else:
        while True:
            print('')
            print('Libraries (%d): ' % len(project['libs']))
            for lib in project['libs']:
                print('    * %s' % lib)
            while True:
                resp = raw_input('Create another [no]: ') or 'no'
                if resp != 'yes' and resp != 'no':
                    print('Invalid option')
                else:
                    break
            if resp == 'no':
                break
            else:
                lib = 'lib'+project['name']
                lib = raw_input('Library name [%s]: ' % lib) or lib
                project['libs'].append(lib)

    if(hasattr(args['exes'], '__len__') and len(args['exes']) > 0):
        project['exes'] = args['exes']
    else:
        while True:
            print('')
            print('Executables (%d): ' % len(project['exes']))
            i = 0
            for exe in project['exes']:
                if exe is str:
                    exe = [exe, exe]
                    project['exes'][i] = exe
                i = i + 1
                print('    * %s [%s]' % (exe[0], exe[1]))
            while True:
                resp = raw_input('Create another [no]: ') or 'no'
                if resp != 'yes' and resp != 'no':
                    print('Invalid option')
                else:
                    break
            if resp == 'no':
                break
            else:
                exe = project['name']
                exe = raw_input('Executable name [%s]: ' % exe) or exe
                exeA = raw_input('Executable alias [%s]: ' % exe) or exe
                project['exes'].append([exe, exeA])


    if(hasattr(args['deps'], '__len__') and len(args['deps']) > 0):
        project['deps'] = args['deps']
    else:
        while True:
            print('')
            print('Dependencies (%d): ' % len(project['deps']))
            for exe in project['deps']:
                print('    * %s' % exe)
            while True:
                resp = raw_input('Create another [no]: ') or 'no'
                if resp != 'yes' and resp != 'no':
                    print('Invalid option')
                else:
                    break
            if resp == 'no':
                break
            else:
                dep = ''
                dep = raw_input('Dependency (git, folder): ') or dep
                valid = True
                if len(dep) == 0:
                    valid = False
                elif os.path.exists(dep):
                    project['deps'].append(dep)
                else:
                    rt = run(['git', 'ls-remote', dep])
                    if rt == 0:
                        project['deps'].append(dep)
                    else:
                        valid = False
                if not valid:
                    print('Invalid dependency [%s]' % dep)

    with open('cmake-project.json', 'w') as outfile:
        project['tool'] = 'cmake-tools v%d.%d' % (_vmajor, _vminor)
        json.dump(project, outfile)

    return project

def construct(project):
    srcPath = 'src'
    libsPath = srcPath + '/lib'
    exesPath = srcPath + '/exe'

    ext = project['language']

    cmakeSrcCode = ""

    if not os.path.exists(srcPath):
        os.makedirs(srcPath)

    libsLinkStr = ""

    if len(project['libs']) > 0:
        cmakeSrcCode += "add_subdirectory(lib)\n"
        if not os.path.exists(libsPath):
            os.makedirs(libsPath)
        
        cmakeLibsSource = ""
        for lib in project['libs']:
            cmakeLibsSource += "add_subdirectory(%s)\n" % lib
            libsLinkStr += " %s" % lib

            libPath = libsPath + '/' + lib
            
            if not os.path.exists(libPath):
                os.makedirs(libPath)

            cmakeLibSource = "include_directories(..)\n\n"
            cmakeLibSource += "set(SRC %s.%s)\n\n" % (lib, ext)
            cmakeLibSource += "add_library(%s ${SRC})" % lib

            if not os.path.exists(libPath + "/CMakeLists.txt"):
                with open(libPath + "/CMakeLists.txt", "w") as file:
                    file.write(cmakeLibSource)

            src = ""
            hdr = ""
            srcName = ""
            hdrName = ""
            if ext == 'c':
                hdrDefName = "_%s_%s_H_" % (project['name'].upper(), lib.upper())
                srcName = '%s.c' % lib
                hdrName = '%s.h' % lib
                hdr = '#ifndef %s\n#define %s\n\n\n#endif\n' % (hdrDefName, hdrDefName)
                src = '#include "%s"' % hdrName
            else:
                hdrDefName = "_%s_%s_HPP_" % (project['name'].upper(), lib.upper())
                srcName = '%s.cpp' % lib
                hdrName = '%s.hpp' % lib
                hdr = '#ifndef %s\n#define %s\n\n\n#endif\n' % (hdrDefName, hdrDefName)
                src = '#include "%s"\n\n' % hdrName

            if not os.path.exists(libPath + "/" + srcName):
                with open(libPath + "/" + srcName , "w") as file:
                    file.write(src)
            if not os.path.exists(libPath + "/" + hdrName):
                with open(libPath + "/" + hdrName , "w") as file:
                    file.write(hdr)

        with open("src/lib/CMakeLists.txt", "w") as file:
            file.write(cmakeLibsSource)
            

    if len(project['exes']) > 0:
        cmakeSrcCode += "add_subdirectory(exe)\n"
        if not os.path.exists(exesPath):
            os.makedirs(exesPath)

        cmakeExesSource = ""
        for exe in project['exes']:
            exeA = exe[1]
            exe = exe[0]
            cmakeExesSource += "add_subdirectory(%s)\n" % exe
            exePath = exesPath + '/' + exe

            if not os.path.exists(exePath):
                os.makedirs(exePath)
            
            cmakeExeSource = "include_directories(../../lib)\n\n"
            cmakeExeSource += "set(SRC main.%s)\n\n" % ext
            cmakeExeSource += "add_executable(%s ${SRC})" % exe
            if(len(libsLinkStr) > 0):
                cmakeExeSource += "\ntarget_link_libraries(%s %s)" % (exe, libsLinkStr)
            cmakeExeSource += "\nset_target_properties(%s PROPERTIES OUTPUT_NAME %s)" % (exe, exeA)

            if not os.path.exists(exePath + "/CMakeLists.txt"):
                with open(exePath + "/CMakeLists.txt", "w") as file:
                    file.write(cmakeExeSource)

            src = ""
            if ext == 'c':
                src = '#include <stdlib.h>\n#include <stdio.h>\nint main(int argc, char *argv[])\n{\n    printf("Hello world!\n");\n    return 0;\n}'
            else:
                src = '#include <iostream>\n\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n    cout << "Hello world!" << endl;\n    return 0;\n}'

            if not os.path.exists(exePath + "/main." + ext ):
                with open(exePath + "/main." + ext , "w") as file:
                    file.write(src)

        with open("src/exe/CMakeLists.txt", "w") as file:
            file.write(cmakeExesSource)

    cmakeCode = "cmake_minimum_required(VERSION 2.8)\n"
    cmakeCode += "project(%s)\n\n" % project['name']
    if len(cmakeSrcCode) > 0:
        cmakeCode += "add_subdirectory(src)"

    with open("CMakeLists.txt", "w") as file:
        file.write(cmakeCode)

    if len(cmakeSrcCode) > 0:
        with open("src/CMakeLists.txt", "w") as file:
            file.write(cmakeSrcCode)

    return True
        

# Construct the argument parser
ap = argparse.ArgumentParser()

# Add the arguments to the parser
ap.add_argument("-n", "--name", required=False, help="project name", type=str, default="")
ap.add_argument("-L", "--language", required=False, help="project language", type=str, default="")
ap.add_argument("-d", "--descr", required=False, help="project description", nargs='*')
ap.add_argument("-v", "--version", required=False, help="project version", type=str, default="")
ap.add_argument("-l", "--libs", required=False, help="project libraries", nargs='*')
ap.add_argument("-e", "--exes", required=False, help="project executables", nargs='*')
ap.add_argument("-D", "--deps", required=False, help="project dependencies", nargs='*')
args = vars(ap.parse_args())


project = createJson(args)
ret = construct(project)
if ret == True:
    print('Project created!')
    print('Use cmake-build to build your project')
else:
    print('Failed to construct the project structure')