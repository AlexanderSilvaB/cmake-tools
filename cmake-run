#! /usr/bin/python

import json 
import os
import sys
import subprocess
import time
import re

print('CMake Project Runner')

def loadProject():
    if(os.path.exists('.cmake-project.json')):
        with open('.cmake-project.json') as json_file:
            return json.load(json_file)

    return None

def run(exe, args):
    exePath = "build/src/exe/%s/%s" % (exe, exe)
    if not os.path.exists(exePath):
        exePath = "build/src/exe/%s/%s.exe" % (exe, exe)
        if not os.path.exists(exePath):
            exePath = "build/src/exe/%s/Release/%s.exe" % (exe, exe)
            if not os.path.exists(exePath):
                exePath = "build/src/exe/%s/Debug/%s.exe" % (exe, exe)
                if not os.path.exists(exePath):
                    return None

    print("")
    start = time.time()

    manually = False

    args.insert(0, "./" + exePath)
    p = subprocess.Popen(args)
    try:
        p.communicate()
    except:
        manually = True

    end = time.time()

    s = end - start
    if manually:
        print("\n\033[0;32mRun finished manually in %fs\033[0;0m" % s)
    else:
        print("\n\033[0;32mRun finished in %fs with code %d\033[0;0m" % (s, p.returncode))
    return True

project = loadProject()
if project == None:
    print('No project found')
    exit()

if len(project['exes']) == 0:
    print("No executables to run")
    exit()

argIndex = 1

exe = project["exes"][0]
if len(sys.argv) > 1:
    exe = sys.argv[1]
    if exe not in project["exes"]:
        exe = project["exes"][0]
    else:
        argIndex = 2

args = []
if len(sys.argv) > argIndex:
    args = sys.argv[argIndex:]

if exe not in project["exes"]:
    print("\033[0;31m'%s' is not a valid executable\033[0;0m" % exe)
    exit()

print("\033[1;34mExecutable: %s\033[0;0m" % exe)
ret = run(exe, args)
if ret == None:
    print("Project not builded.")
    print("Use cmake-build before.")
    exit()

if ret == False:
    print('Failed to run the executable')