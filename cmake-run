#! /usr/bin/python

import json 
import os
import sys
import subprocess
import time
import re
import argparse
from sys import exit

print('CMake Project Runner')

def isCmakeToolsProject():
    if(os.path.exists('.cmake-project.json')):
        os.rename('.cmake-project.json', 'cmake-project.json')
    if(os.path.exists('cmake-project.json')):
        return True
    return False

def loadProject():
    if(isCmakeToolsProject()):
        with open('cmake-project.json') as json_file:
            return json.load(json_file)

    return None

def run(exes, args):

    paths = []

    for exe in exes:
        exePath = "build/src/exe/%s/%s" % (exe, exe)
        if not os.path.exists(exePath):
            exePath = "build/src/exe/%s/%s.exe" % (exe, exe)
            if not os.path.exists(exePath):
                exePath = "build/src/exe/%s/Release/%s.exe" % (exe, exe)
                if not os.path.exists(exePath):
                    exePath = "build/src/exe/%s/Debug/%s.exe" % (exe, exe)
                    if not os.path.exists(exePath):
                        return None
        margs = args
        margs.insert(0, "./" + exePath)
        paths.append(margs)
        

    print("")
    start = time.time()

    manually = False
    
    for exeArgs in paths:
        p = subprocess.Popen(exeArgs)
        try:
            p.communicate()
        except:
            manually = True

    end = time.time()

    s = end - start
    if manually:
        print("\n\033[0;32mRun finished manually in %fs\033[0;0m" % s)
    else:
        print("\n\033[0;32mRun finished in %fs with code %d\033[0;0m" % (s, p.returncode))
    return True

project = loadProject()
if project == None:
    print('No project found')
    exit()

if len(project['exes']) == 0:
    print("No executables to run")
    exit()

argIndex = 1

# Construct the argument parser
ap = argparse.ArgumentParser()

# Add the arguments to the parser
ap.add_argument("-e", "--exes", required=False, help="project executables to run", nargs='*')
ap.add_argument("-a", "--args", required=False, help="executable arguments", nargs='*')
args = vars(ap.parse_args())

if(hasattr(args['exes'], '__len__') and len(args['exes']) > 0):
    exes = args['exes']
else:
    exes = [project["exes"][0]]

rargs = []
if(hasattr(args['args'], '__len__') and len(args['args']) > 0):
    rargs = args['args']


for exe in exes:
    if exe not in project["exes"]:
        print("\033[0;31m'%s' is not a valid executable\033[0;0m" % exe)
        exit()

print("\033[1;34mExecutables: %s\033[0;0m" % exes)
ret = run(exes, rargs)
if ret == None:
    print("Project not builded.")
    print("Use cmake-build before.")
    exit()

if ret == False:
    print('Failed to run the executable')